1654891618
AwuilbDvXz%3A2941fd45fcb9ffe9bfe3daa74f7457af-3b30c6f3f945c7d8e8de9a28d0a5c428
s:8016:"TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlIjoxMjp7czo0MzoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBkb2NCbG9jayI7TzozMzoicGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrIjo3OntzOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAHN1bW1hcnkiO3M6NDA6IlRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBDYXJib24gcGFja2FnZS4iO3M6NDY6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAZGVzY3JpcHRpb24iO086NDU6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbiI6Mjp7czo1OToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgBib2R5VGVtcGxhdGUiO3M6MTU4OiIoYykgQnJpYW4gTmVzYml0dCA8YnJpYW5AbmVzYm90LmNvbT4KCkZvciB0aGUgZnVsbCBjb3B5cmlnaHQgYW5kIGxpY2Vuc2UgaW5mb3JtYXRpb24sIHBsZWFzZSB2aWV3IHRoZSBMSUNFTlNFCmZpbGUgdGhhdCB3YXMgZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHNvdXJjZSBjb2RlLiI7czo1MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9ja1xEZXNjcmlwdGlvbgB0YWdzIjthOjA6e319czozOToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawB0YWdzIjthOjA6e31zOjQyOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGNvbnRleHQiO086Mzg6InBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0IjoyOntzOjQ5OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFR5cGVzXENvbnRleHQAbmFtZXNwYWNlIjtzOjA6IiI7czo1NjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxUeXBlc1xDb250ZXh0AG5hbWVzcGFjZUFsaWFzZXMiO2E6MDp7fX1zOjQzOiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXERvY0Jsb2NrAGxvY2F0aW9uIjtPOjMzOiJwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24iOjI6e3M6NDU6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AbGluZU51bWJlciI7aTozO3M6NDc6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cTG9jYXRpb24AY29sdW1uTnVtYmVyIjtpOjA7fXM6NTA6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cRG9jQmxvY2sAaXNUZW1wbGF0ZVN0YXJ0IjtiOjA7czo0ODoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxEb2NCbG9jawBpc1RlbXBsYXRlRW5kIjtiOjA7fXM6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaGFzaCI7czozMjoiM2IzMGM2ZjNmOTQ1YzdkOGU4ZGU5YTI4ZDBhNWM0MjgiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAbmFtZSI7czo2OiJoci5waHAiO3M6Mzk6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAcGF0aCI7czo0MzoidmVuZG9yL25lc2JvdC9jYXJib24vc3JjL0NhcmJvbi9MYW5nL2hyLnBocCI7czo0MToiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBzb3VyY2UiO3M6NDAzNToiPD9waHAKCi8qKgogKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgQ2FyYm9uIHBhY2thZ2UuCiAqCiAqIChjKSBCcmlhbiBOZXNiaXR0IDxicmlhbkBuZXNib3QuY29tPgogKgogKiBGb3IgdGhlIGZ1bGwgY29weXJpZ2h0IGFuZCBsaWNlbnNlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlldyB0aGUgTElDRU5TRQogKiBmaWxlIHRoYXQgd2FzIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyBzb3VyY2UgY29kZS4KICovCgovKgogKiBBdXRob3JzOgogKiAtIEpvc2ggU29yZWYKICogLSBGcmFuw6dvaXMgQgogKiAtIFRpbSBGaXNoCiAqIC0gc2hhaXNoYXZnYW5kaGkwNQogKiAtIFNlcmhhbiBBcGF5ZMSxbgogKiAtIEpEIElzYWFja3MKICogLSB0b21ob3J2YXQKICogLSBKb3NoIFNvcmVmCiAqIC0gRnJhbsOnb2lzIEIKICogLSBzaGFpc2hhdmdhbmRoaTA1CiAqIC0gU2VyaGFuIEFwYXlkxLFuCiAqIC0gSkQgSXNhYWNrcwogKiAtIHRvbWhvcnZhdAogKiAtIFN0amVwYW4gTWFqZGFrCiAqIC0gVmFuamEgUmV0a292YWMgKHZyMDApCiAqLwpyZXR1cm4gWwogICAgJ3llYXInID0+ICc6Y291bnQgZ29kaW51fDpjb3VudCBnb2RpbmV8OmNvdW50IGdvZGluYScsCiAgICAneScgPT4gJzpjb3VudCBnb2QufDpjb3VudCBnb2QufDpjb3VudCBnb2QuJywKICAgICdtb250aCcgPT4gJzpjb3VudCBtamVzZWN8OmNvdW50IG1qZXNlY2F8OmNvdW50IG1qZXNlY2knLAogICAgJ20nID0+ICc6Y291bnQgbWoufDpjb3VudCBtai58OmNvdW50IG1qLicsCiAgICAnd2VlaycgPT4gJzpjb3VudCB0amVkYW58OmNvdW50IHRqZWRuYXw6Y291bnQgdGplZGFuYScsCiAgICAndycgPT4gJzpjb3VudCB0ai58OmNvdW50IHRqLnw6Y291bnQgdGouJywKICAgICdkYXknID0+ICc6Y291bnQgZGFufDpjb3VudCBkYW5hfDpjb3VudCBkYW5hJywKICAgICdkJyA9PiAnOmNvdW50IGQufDpjb3VudCBkLnw6Y291bnQgZC4nLAogICAgJ2hvdXInID0+ICc6Y291bnQgc2F0fDpjb3VudCBzYXRhfDpjb3VudCBzYXRpJywKICAgICdoJyA9PiAnOmNvdW50IHNhdHw6Y291bnQgc2F0YXw6Y291bnQgc2F0aScsCiAgICAnbWludXRlJyA9PiAnOmNvdW50IG1pbnV0dXw6Y291bnQgbWludXRlfDpjb3VudCBtaW51dGEnLAogICAgJ21pbicgPT4gJzpjb3VudCBtaW4ufDpjb3VudCBtaW4ufDpjb3VudCBtaW4uJywKICAgICdzZWNvbmQnID0+ICc6Y291bnQgc2VrdW5kdXw6Y291bnQgc2VrdW5kZXw6Y291bnQgc2VrdW5kaScsCiAgICAnYV9zZWNvbmQnID0+ICduZWtvbGlrbyBzZWt1bmRpfDpjb3VudCBzZWt1bmRlfDpjb3VudCBzZWt1bmRpJywKICAgICdzJyA9PiAnOmNvdW50IHNlay58OmNvdW50IHNlay58OmNvdW50IHNlay4nLAogICAgJ2FnbycgPT4gJ3ByaWplIDp0aW1lJywKICAgICdmcm9tX25vdycgPT4gJ3phIDp0aW1lJywKICAgICdhZnRlcicgPT4gJzp0aW1lIHBvc2xpamUnLAogICAgJ2JlZm9yZScgPT4gJzp0aW1lIHByaWplJywKICAgICdkaWZmX25vdycgPT4gJ3NhZCcsCiAgICAnZGlmZl90b2RheScgPT4gJ2RhbmFzJywKICAgICdkaWZmX3RvZGF5X3JlZ2V4cCcgPT4gJ2RhbmFzKD86XFxzK3UpPycsCiAgICAnZGlmZl95ZXN0ZXJkYXknID0+ICdqdcSNZXInLAogICAgJ2RpZmZfeWVzdGVyZGF5X3JlZ2V4cCcgPT4gJ2p1xI1lcig/Olxccyt1KT8nLAogICAgJ2RpZmZfdG9tb3Jyb3cnID0+ICdzdXRyYScsCiAgICAnZGlmZl90b21vcnJvd19yZWdleHAnID0+ICdzdXRyYSg/Olxccyt1KT8nLAogICAgJ2RpZmZfYmVmb3JlX3llc3RlcmRheScgPT4gJ3ByZWtqdcSNZXInLAogICAgJ2RpZmZfYWZ0ZXJfdG9tb3Jyb3cnID0+ICdwcmVrb3N1dHJhJywKICAgICdmb3JtYXRzJyA9PiBbCiAgICAgICAgJ0xUJyA9PiAnSDptbScsCiAgICAgICAgJ0xUUycgPT4gJ0g6bW06c3MnLAogICAgICAgICdMJyA9PiAnRC4gTS4gWVlZWS4nLAogICAgICAgICdMTCcgPT4gJ0QuIE1NTU0gWVlZWS4nLAogICAgICAgICdMTEwnID0+ICdELiBNTU1NIFlZWVkuIEg6bW0nLAogICAgICAgICdMTExMJyA9PiAnZGRkZCwgRC4gTU1NTSBZWVlZLiBIOm1tJywKICAgIF0sCiAgICAnY2FsZW5kYXInID0+IFsKICAgICAgICAnc2FtZURheScgPT4gJ1tkYW5hcyB1XSBMVCcsCiAgICAgICAgJ25leHREYXknID0+ICdbc3V0cmEgdV0gTFQnLAogICAgICAgICduZXh0V2VlaycgPT4gZnVuY3Rpb24gKFxDYXJib25cQ2FyYm9uSW50ZXJmYWNlICRkYXRlKSB7CiAgICAgICAgICAgIHN3aXRjaCAoJGRhdGUtPmRheU9mV2VlaykgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3VdIFtuZWRqZWxqdV0gW3VdIExUJzsKICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3JpamVkdV0gW3VdIExUJzsKICAgICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBbc3Vib3R1XSBbdV0gTFQnOwogICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1t1XSBkZGRkIFt1XSBMVCc7CiAgICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgICdsYXN0RGF5JyA9PiAnW2p1xI1lciB1XSBMVCcsCiAgICAgICAgJ2xhc3RXZWVrJyA9PiBmdW5jdGlvbiAoXENhcmJvblxDYXJib25JbnRlcmZhY2UgJGRhdGUpIHsKICAgICAgICAgICAgc3dpdGNoICgkZGF0ZS0+ZGF5T2ZXZWVrKSB7CiAgICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdbcHJvxaFsdV0gZGRkZCBbdV0gTFQnOwogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGVdIFtzdWJvdGVdIFt1XSBMVCc7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHJldHVybiAnW3Byb8WhbGldIGRkZGQgW3VdIExUJzsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgJ3NhbWVFbHNlJyA9PiAnTCcsCiAgICBdLAogICAgJ29yZGluYWwnID0+ICc6bnVtYmVyLicsCiAgICAnbW9udGhzJyA9PiBbJ3NpamXEjW5qYScsICd2ZWxqYcSNZScsICdvxb51amthJywgJ3RyYXZuamEnLCAnc3ZpYm5qYScsICdsaXBuamEnLCAnc3JwbmphJywgJ2tvbG92b3phJywgJ3J1am5hJywgJ2xpc3RvcGFkYScsICdzdHVkZW5vZ2EnLCAncHJvc2luY2EnXSwKICAgICdtb250aHNfc3RhbmRhbG9uZScgPT4gWydzaWplxI1hbmonLCAndmVsamHEjWEnLCAnb8W+dWphaycsICd0cmF2YW5qJywgJ3N2aWJhbmonLCAnbGlwYW5qJywgJ3NycGFuaicsICdrb2xvdm96JywgJ3J1amFuJywgJ2xpc3RvcGFkJywgJ3N0dWRlbmknLCAncHJvc2luYWMnXSwKICAgICdtb250aHNfc2hvcnQnID0+IFsnc2lqLicsICd2ZWxqLicsICdvxb51LicsICd0cmEuJywgJ3N2aS4nLCAnbGlwLicsICdzcnAuJywgJ2tvbC4nLCAncnVqLicsICdsaXMuJywgJ3N0dS4nLCAncHJvLiddLAogICAgJ21vbnRoc19yZWdleHAnID0+ICcvKERbb0RdPyhcW1teXFtcXV0qXF18XHMpK01NTU0/fEx7Miw0fXxsezIsNH0pLycsCiAgICAnd2Vla2RheXMnID0+IFsnbmVkamVsanUnLCAncG9uZWRqZWxqYWsnLCAndXRvcmFrJywgJ3NyaWplZHUnLCAnxI1ldHZydGFrJywgJ3BldGFrJywgJ3N1Ym90dSddLAogICAgJ3dlZWtkYXlzX3N0YW5kYWxvbmUnID0+IFsnbmVkamVsamEnLCAncG9uZWRqZWxqYWsnLCAndXRvcmFrJywgJ3NyaWplZGEnLCAnxI1ldHZydGFrJywgJ3BldGFrJywgJ3N1Ym90YSddLAogICAgJ3dlZWtkYXlzX3Nob3J0JyA9PiBbJ25lZC4nLCAncG9uLicsICd1dG8uJywgJ3NyaS4nLCAnxI1ldC4nLCAncGV0LicsICdzdWIuJ10sCiAgICAnd2Vla2RheXNfbWluJyA9PiBbJ25lJywgJ3BvJywgJ3V0JywgJ3NyJywgJ8SNZScsICdwZScsICdzdSddLAogICAgJ2ZpcnN0X2RheV9vZl93ZWVrJyA9PiAxLAogICAgJ2RheV9vZl9maXJzdF93ZWVrX29mX3llYXInID0+IDEsCiAgICAnbGlzdCcgPT4gWycsICcsICcgaSAnXSwKXTsKIjtzOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAG5hbWVzcGFjZXMiO2E6MDp7fXM6NDM6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAaW5jbHVkZXMiO2E6MDp7fXM6NDQ6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAZnVuY3Rpb25zIjthOjA6e31zOjQ0OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGNvbnN0YW50cyI7YTowOnt9czo0MjoiAHBocERvY3VtZW50b3JcUmVmbGVjdGlvblxQaHBcRmlsZQBjbGFzc2VzIjthOjA6e31zOjQ1OiIAcGhwRG9jdW1lbnRvclxSZWZsZWN0aW9uXFBocFxGaWxlAGludGVyZmFjZXMiO2E6MDp7fXM6NDE6IgBwaHBEb2N1bWVudG9yXFJlZmxlY3Rpb25cUGhwXEZpbGUAdHJhaXRzIjthOjA6e319";